# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

toolchain("clang") {
  tool("cc") {
    # Depfile configs
    depfile = "{{output}}.d"
    depsformat = "gcc" # "gcc" or "msvc"

    # Command
    command = "clang -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"

    # Outputs
    outputs = [
      "{{source_out_dir}}/{{source_name_part}}.o",
    ]

    # Used by Ninja's status message
    description = "CC {{output}}"
  }

  tool("cxx") {
    # Depfile configs
    depfile = "{{output}}.d"
    depsformat = "gcc" # "gcc" or "msvc"

    # Command
    command = "clang++ -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    # Outputs
    outputs = [
      "{{source_out_dir}}/{{source_name_part}}.o",
    ]

    # Used by Ninja's status message
    description = "CXX {{output}}"
  }

  tool("alink") {
    # Command
    command = "rm -f {{output}} && ar rcs {{output}} {{inputs}}"

    # Outputs
    outputs = [
      "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
    ]

    # Targets can opt-out of the output prefix by setting: output_prefix_override = true
    output_prefix = "lib"
    # Default value of {{output_extension}} unless a target manually overrides it.
    default_output_extension = ".a"
    # Use this for {{output_dir}} expansions unless a target manually overrides it
    default_output_dir = "{{root_out_dir}}"
    # Used by Ninja's status message
    description = "AR {{target_output_name}}{{output_extension}}"
  }

  tool("solink") {
    # Variable definitions
    soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
    sofile = "{{output_dir}}/$soname"
    os_specific_option = "-Wl,-soname=$soname"
    if (is_mac) {
      os_specific_option = "-install_name @executable_path/$sofile"
    }

    # Command
    command = "clang++ -shared {{ldflags}} $os_specific_option -o $sofile {{inputs}} {{solibs}} {{libs}}"

    # Outputs
    outputs = [
      sofile,
    ]
    link_output = sofile
    depend_output = sofile

    # Targets can opt-out of the output prefix by setting: output_prefix_override = true
    output_prefix = "lib"
    # Default value of {{output_extension}} unless a target manually overrides it.
    default_output_extension = ".so"
    # Default value of {{output_dir}} unless a target manually overrides it
    default_output_dir = "{{root_out_dir}}/$runtime_dir"
    # Used by Ninja's status message
    description = "SOLINK $soname"
  }

  tool("link") {
    # Variable definitions
    outfile = "{{target_output_name}}{{output_extension}}"
    # Command
    command = "clang++ {{ldflags}} -o $outfile {{inputs}} {{solibs}} {{libs}}"
    
    # Outputs
    outputs = [
      outfile,
    ]

    # Default value of {{output_extension}} unless a target manually overrides it.
    default_output_extension = ""
    # Default value of {{output_dir}} unless a target manually overrides it
    default_output_dir = "{{root_out_dir}}"
    # Used by Ninja's status message
    description = "LINK $outfile"
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "cp -af {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
